class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.empty() || grid[0].empty())	return 0;
        const int m = grid.size();
        const int n = grid[0].size();
        int res = 0;
        vector<vector<bool>> visited(m, vector<bool>(n));
        for(int i = 0; i < m; ++i){
        	for(int j = 0; j < n ; ++j){
        		if(grid[i][j] == '0' || visited[i][j]) continue;
        		++res;
				dfs(grid, visited, i, j);
			}
		}
		return res;
    }
private:
	void dfs(vector<vector<char>> &grid, vector<vector<bool>> &visited, int i, int j){
		if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == '0' || visited[i][j])	return;
		visited[i][j] = true;
		dfs(grid, visited, i - 1, j);
		dfs(grid, visited, i + 1, j);
		dfs(grid, visited, i, j - 1);
		dfs(grid, visited, i, j + 1);
	}
};
