class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        if(heights.empty() || heights[0].empty())	return {};
        vector<vector<int>> res;
        const int m = heights.size();
		const int n = heights[0].size();
		vector<vector<bool>> pac(m, vector<bool>(n));
		vector<vector<bool>> atl(m, vector<bool>(n));
		for(int i = 0; i < m; ++i){
			dfs(heights, pac, INT_MIN, i, 0);
			dfs(heights, atl, INT_MIN, i, n - 1);
		}
		for(int i = 0; i < n; ++i){
			dfs(heights, pac, INT_MIN, 0, i);
			dfs(heights, atl, INT_MIN, m - 1, i);
		}
		for(int i = 0; i < m; ++i){
			for(int j = 0; j < n; ++j){
				if(pac[i][j] && atl[i][j]){
					res.push_back({i, j});
				}
			}
		}
		return res;
    }
private:
	void dfs(vector<vector<int>> &heights, vector<vector<bool>> &visited, int pre, int i, int j){
		const int m = heights.size();
		const int n = heights[0].size();
		if(i < 0 || i >= m || j < 0 || j >= n || heights[i][j] < pre || visited[i][j])	return ;
		visited[i][j] = true;
		dfs(heights, visited, heights[i][j], i + 1, j);
		dfs(heights, visited, heights[i][j], i - 1, j);
		dfs(heights, visited, heights[i][j], i, j + 1);
		dfs(heights, visited, heights[i][j], i, j - 1);
	}
};
